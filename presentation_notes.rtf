{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Presentation notes\
\
Technical details\
- Player class with properties of hasBomb and victory (keeps track of score)\
- Instance of Player class\
\
- Computer class with properties of hasBomb and victory\
- Instance of Computer class\
\
- Bomb class with properties of this.count which tracks the bomb count\
- method within the class to set the count based on parameter\
- grabbed the ID of the bomb count on the HTML, stored in a variable to display\
  the bomb count on the DOM\
- Instance of the Bomb class\
\
- Variable that keeps track of the number of rounds played\
- Function that sets the bomb count at the start of the round\
\
- Player toss function, player.hasBomb = true, cpu.hasBomb = false\
- wrote a ternary operator where if player chose -2, bomb count would not become a negative number\
- bomb count would keep decreasing based on if player choice\
- if bomb count is at 0 or less, run endGame function, else run cpuToss function\
\
- CPU toss function, player.hasBomb = false, cpu.hasBomb = true\
- Variable storing Math.floor(Math.random() to generate either 1 or 2\
- Variable where if CPU chooses -2, bomb count would equal 0 and not negative, else bomb count would be subtracted by the variable that stores the generate 1 or 2\
- if bomb count is at 0 or less, run endGame function\
\
- newRound function that adds one to round count, generates bomb count, that bomb count will show in the DOM, player.hasBomb = true, cpu.hasBomb = false\
- modal to press Play Again which runs newRound function\
\
- endGame function adds 1 to cpu.victory if player.hasBomb is true when it runs and would put it on the DOM, while if cpu.hasBomb is true when endGame runs, add one to player.victory and put it on the DOM\
\
- made a changeImage function with a parameter of the image path to transition to different pictures of each turn, this is where I had to set timeouts so player can see the images (otherwise, you would only see the picture of Mario holding the bomb and it would never go to Peach (the CPU)\
\
- gameStart function that sets the game up when you first enter the webpage\
\
- made a toggleButtons function each time I want to disable the player from pressing the Decrease buttons, when it is the CPU\'92s turn, I do not want the player to be clicking on the buttons\
\
- event listener for the two decrease buttons with a value of 1 or 2, allows me to not have to write a function to decrease the count by 1 and write another function to decrease the count by 2 (making the code more DRY)\
\
- made a play button for the music that toggles play/pause if you press it\
\
Technical Challenges\
\
- I was unsure whether to code a bomb class and bomb object, since I could just have that implemented as class properties for the Player and Computer, but ultimately decided to code a Bomb class and object to make the code easier to understand for myself and for anyone reading the code\
\
- I wanted a ruleset that set the bomb count to ? when bomb count was at an interval of 3-8, but decided it was not worth it because it kept breaking my code\
\
Possible Improvements\
\
- Make the website more mobile-friendly since there are many gaps that form when you do not view on fullscreen of browser\
\
- Implement CSS grid rather than just flex box\
\
- Think of a more interesting ruleset for the game that involves more risk from the player}